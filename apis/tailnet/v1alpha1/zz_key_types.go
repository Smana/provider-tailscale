/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyObservation struct {

	// The creation timestamp of the key in RFC3339 format
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// A description of the key consisting of alphanumeric characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates if the key is ephemeral.
	Ephemeral *bool `json:"ephemeral,omitempty" tf:"ephemeral,omitempty"`

	// The expiry timestamp of the key in RFC3339 format
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// The expiry of the key in seconds
	Expiry *float64 `json:"expiry,omitempty" tf:"expiry,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Determines whether or not the machines authenticated by the key will be authorized for the tailnet by default.
	Preauthorized *bool `json:"preauthorized,omitempty" tf:"preauthorized,omitempty"`

	// Indicates if the key is reusable or single-use.
	Reusable *bool `json:"reusable,omitempty" tf:"reusable,omitempty"`

	// List of tags to apply to the machines authenticated by the key.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type KeyParameters struct {

	// A description of the key consisting of alphanumeric characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Indicates if the key is ephemeral.
	// +kubebuilder:validation:Optional
	Ephemeral *bool `json:"ephemeral,omitempty" tf:"ephemeral,omitempty"`

	// The expiry of the key in seconds
	// +kubebuilder:validation:Optional
	Expiry *float64 `json:"expiry,omitempty" tf:"expiry,omitempty"`

	// Determines whether or not the machines authenticated by the key will be authorized for the tailnet by default.
	// +kubebuilder:validation:Optional
	Preauthorized *bool `json:"preauthorized,omitempty" tf:"preauthorized,omitempty"`

	// Indicates if the key is reusable or single-use.
	// +kubebuilder:validation:Optional
	Reusable *bool `json:"reusable,omitempty" tf:"reusable,omitempty"`

	// List of tags to apply to the machines authenticated by the key.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// KeySpec defines the desired state of Key
type KeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyParameters `json:"forProvider"`
}

// KeyStatus defines the observed state of Key.
type KeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Key is the Schema for the Keys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tailscale}
type Key struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeySpec   `json:"spec"`
	Status            KeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyList contains a list of Keys
type KeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Key `json:"items"`
}

// Repository type metadata.
var (
	Key_Kind             = "Key"
	Key_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Key_Kind}.String()
	Key_KindAPIVersion   = Key_Kind + "." + CRDGroupVersion.String()
	Key_GroupVersionKind = CRDGroupVersion.WithKind(Key_Kind)
)

func init() {
	SchemeBuilder.Register(&Key{}, &KeyList{})
}
