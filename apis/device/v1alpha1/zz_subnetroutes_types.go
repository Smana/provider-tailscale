/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubnetRoutesObservation struct {

	// The device to set subnet routes for
	DeviceID *string `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The subnet routes that are enabled to be routed by a device
	Routes []*string `json:"routes,omitempty" tf:"routes,omitempty"`
}

type SubnetRoutesParameters struct {

	// The device to set subnet routes for
	// +kubebuilder:validation:Optional
	DeviceID *string `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	// The subnet routes that are enabled to be routed by a device
	// +kubebuilder:validation:Optional
	Routes []*string `json:"routes,omitempty" tf:"routes,omitempty"`
}

// SubnetRoutesSpec defines the desired state of SubnetRoutes
type SubnetRoutesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubnetRoutesParameters `json:"forProvider"`
}

// SubnetRoutesStatus defines the observed state of SubnetRoutes.
type SubnetRoutesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubnetRoutesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubnetRoutes is the Schema for the SubnetRoutess API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tailscale}
type SubnetRoutes struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.deviceId)",message="deviceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.routes)",message="routes is a required parameter"
	Spec   SubnetRoutesSpec   `json:"spec"`
	Status SubnetRoutesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubnetRoutesList contains a list of SubnetRoutess
type SubnetRoutesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubnetRoutes `json:"items"`
}

// Repository type metadata.
var (
	SubnetRoutes_Kind             = "SubnetRoutes"
	SubnetRoutes_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SubnetRoutes_Kind}.String()
	SubnetRoutes_KindAPIVersion   = SubnetRoutes_Kind + "." + CRDGroupVersion.String()
	SubnetRoutes_GroupVersionKind = CRDGroupVersion.WithKind(SubnetRoutes_Kind)
)

func init() {
	SchemeBuilder.Register(&SubnetRoutes{}, &SubnetRoutesList{})
}
