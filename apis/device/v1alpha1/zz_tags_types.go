/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TagsObservation struct {

	// The device to set tags for
	DeviceID *string `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The tags to apply to the device
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TagsParameters struct {

	// The device to set tags for
	// +kubebuilder:validation:Optional
	DeviceID *string `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	// The tags to apply to the device
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// TagsSpec defines the desired state of Tags
type TagsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagsParameters `json:"forProvider"`
}

// TagsStatus defines the observed state of Tags.
type TagsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Tags is the Schema for the Tagss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tailscale}
type Tags struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.deviceId)",message="deviceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.tags)",message="tags is a required parameter"
	Spec   TagsSpec   `json:"spec"`
	Status TagsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagsList contains a list of Tagss
type TagsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Tags `json:"items"`
}

// Repository type metadata.
var (
	Tags_Kind             = "Tags"
	Tags_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Tags_Kind}.String()
	Tags_KindAPIVersion   = Tags_Kind + "." + CRDGroupVersion.String()
	Tags_GroupVersionKind = CRDGroupVersion.WithKind(Tags_Kind)
)

func init() {
	SchemeBuilder.Register(&Tags{}, &TagsList{})
}
