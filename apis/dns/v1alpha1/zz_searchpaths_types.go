/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SearchPathsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Devices on your network will use these domain suffixes to resolve DNS names.
	SearchPaths []*string `json:"searchPaths,omitempty" tf:"search_paths,omitempty"`
}

type SearchPathsParameters struct {

	// Devices on your network will use these domain suffixes to resolve DNS names.
	// +kubebuilder:validation:Optional
	SearchPaths []*string `json:"searchPaths,omitempty" tf:"search_paths,omitempty"`
}

// SearchPathsSpec defines the desired state of SearchPaths
type SearchPathsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SearchPathsParameters `json:"forProvider"`
}

// SearchPathsStatus defines the observed state of SearchPaths.
type SearchPathsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SearchPathsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SearchPaths is the Schema for the SearchPathss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tailscale}
type SearchPaths struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.searchPaths)",message="searchPaths is a required parameter"
	Spec   SearchPathsSpec   `json:"spec"`
	Status SearchPathsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SearchPathsList contains a list of SearchPathss
type SearchPathsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SearchPaths `json:"items"`
}

// Repository type metadata.
var (
	SearchPaths_Kind             = "SearchPaths"
	SearchPaths_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SearchPaths_Kind}.String()
	SearchPaths_KindAPIVersion   = SearchPaths_Kind + "." + CRDGroupVersion.String()
	SearchPaths_GroupVersionKind = CRDGroupVersion.WithKind(SearchPaths_Kind)
)

func init() {
	SchemeBuilder.Register(&SearchPaths{}, &SearchPathsList{})
}
