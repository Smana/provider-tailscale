/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NameserversObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.
	Nameservers []*string `json:"nameservers,omitempty" tf:"nameservers,omitempty"`
}

type NameserversParameters struct {

	// Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.
	// +kubebuilder:validation:Optional
	Nameservers []*string `json:"nameservers,omitempty" tf:"nameservers,omitempty"`
}

// NameserversSpec defines the desired state of Nameservers
type NameserversSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NameserversParameters `json:"forProvider"`
}

// NameserversStatus defines the observed state of Nameservers.
type NameserversStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NameserversObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Nameservers is the Schema for the Nameserverss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tailscale}
type Nameservers struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.nameservers)",message="nameservers is a required parameter"
	Spec   NameserversSpec   `json:"spec"`
	Status NameserversStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NameserversList contains a list of Nameserverss
type NameserversList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Nameservers `json:"items"`
}

// Repository type metadata.
var (
	Nameservers_Kind             = "Nameservers"
	Nameservers_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Nameservers_Kind}.String()
	Nameservers_KindAPIVersion   = Nameservers_Kind + "." + CRDGroupVersion.String()
	Nameservers_GroupVersionKind = CRDGroupVersion.WithKind(Nameservers_Kind)
)

func init() {
	SchemeBuilder.Register(&Nameservers{}, &NameserversList{})
}
