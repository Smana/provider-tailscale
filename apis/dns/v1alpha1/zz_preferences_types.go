/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PreferencesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether or not to enable magic DNS
	MagicDNS *bool `json:"magicDns,omitempty" tf:"magic_dns,omitempty"`
}

type PreferencesParameters struct {

	// Whether or not to enable magic DNS
	// +kubebuilder:validation:Optional
	MagicDNS *bool `json:"magicDns,omitempty" tf:"magic_dns,omitempty"`
}

// PreferencesSpec defines the desired state of Preferences
type PreferencesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PreferencesParameters `json:"forProvider"`
}

// PreferencesStatus defines the observed state of Preferences.
type PreferencesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PreferencesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Preferences is the Schema for the Preferencess API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tailscale}
type Preferences struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.magicDns)",message="magicDns is a required parameter"
	Spec   PreferencesSpec   `json:"spec"`
	Status PreferencesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PreferencesList contains a list of Preferencess
type PreferencesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Preferences `json:"items"`
}

// Repository type metadata.
var (
	Preferences_Kind             = "Preferences"
	Preferences_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Preferences_Kind}.String()
	Preferences_KindAPIVersion   = Preferences_Kind + "." + CRDGroupVersion.String()
	Preferences_GroupVersionKind = CRDGroupVersion.WithKind(Preferences_Kind)
)

func init() {
	SchemeBuilder.Register(&Preferences{}, &PreferencesList{})
}
